digraph finite_state_machine {
	label="StateMachine";
	fontsize=12;
	size="200"
	node [shape = doublecircle]; Start Exit;
	node [shape = box];
	//rankdir=LR;
	//splines="ortho";
	//layout=sfdp;
	//k=1;
	//len=3;

	//VERTEX-STATES
	Start[label = "s0: START"];
	Fetch_next_word[label = "s1: Fetch_next_word\n-If word is longer than 2 char and\nends with ';', then remove ';'"];
	Found_TITLE[label = "s2: Found_TITLE\n-Set the word as TITLE.\n-Print the TITLE for .dot file.\n-Scan next word.\n-Is next word a 'OF' statement?"];
	Found_NODE[label = "s3: Found_NODE\n-Set the word as NODE.\n-Is TITLE <> NULL?"];
	Found_TRANSITION[label = "s4: Found_TRANSITION\n-Is next word a ':=' statment?"];
	Print_TRANSITION[label = "s5: Print_TRANSITION\n-Print the actual NODE as origin and\nthe TRANSITION as destination"];
	Fault[label = "s6: FAULT"];
	Exit[label = "s7: EXIT"];

	//EDGE
	Start -> Fetch_next_word
	[ label = "e0: LinkedListReady" ];

	Fetch_next_word -> Found_TITLE
	[ label = "e1: Found CASE" ];

	Fetch_next_word	-> Found_NODE
	[ label = "e2: Found NODE:" ];

	Fetch_next_word -> Found_TRANSITION
	[ label = "e3: Word==TITLE" ];

	Fetch_next_word -> Fetch_next_word
	[ label = "e4: No keywords" ];

	Fetch_next_word	-> Exit
	[ label = "e5: Found END_CASE" ];

	Found_TITLE -> Fault
	[ label = "e6: NO\nFAULT=CASE" ]; //found CASE but not OF

	Found_TITLE -> Fetch_next_word
	[ label = "e7: YES" ];

	Found_NODE -> Fault
	[ label = "e8: NO\nFAULT=NODE" ]; //found NODE before TITILE

	Found_NODE -> Fetch_next_word
	[ label = "e9: YES" ];

	Found_TRANSITION -> Print_TRANSITION
	[ label = "e10: YES" ];

	Found_TRANSITION -> Fault
	[ label = "e11: NO\nFAULT=TRANSITION" ]; //found a word == TITLE, but no assignment after that

	Print_TRANSITION -> Fetch_next_word
	[ label = "e12: Continue" ];

	Fault -> Exit
	[ label = "e13: Return fault\nCASE/NODE/TRANSITION" ];
}

